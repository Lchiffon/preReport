cat(iris)
install.packages("D:/Users/langdw/Downloads/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
input = iris
data = input
outData = data.frame(features = names(data),
class = sapply(data,class),
NAs = sum(is.na(outData)))
outData = data.frame(features = names(data),
class = sapply(data,class),
NAs = sapply(data,function(x) sum(is.na(x)))
outData = data.frame(features = names(data),
class = sapply(data,class),
NAs = sapply(data,function(x) sum(is.na(x))))
outData = data.frame(features = names(data),
class = sapply(data,class),
NAs = sapply(data,function(x) sum(is.na(x))))
knitr::kable(outData)
features = names(data)
class = sapply(data,class)
NAs = sapply(data,function(x) sum(is.na(x)))
outData = data.frame(features,class,NAs)
row.names(outData) = 1:dim(data)[2]
knitr::kable(outData)
number = 1:dim(data)[2]
features = names(data)
class = sapply(data,class)
NAs = sapply(data,function(x) sum(is.na(x)))
outData = data.frame(number,
features,
class,
NAs)
knitr::kable(outData)
??kable
```{r}
# number = 1:dim(data)[2]
features = names(data)
class = sapply(data,class)
NAs = sapply(data,function(x) sum(is.na(x)))
outData = data.frame(features,
class,
NAs)
## TODO: Consider Change Names here
###
###
knitr::kable(outData,row.names = 1:dim(data)[2])
```
1:dim(data)[2]
knitr::kable(outData,row.names = as.character(1:5))
as.character(1:5)
knitr::kable(outData,row.names = T)
row.names(outData)
row.names(outData) = 1:dim(data)[2]
knitr::kable(outData)
row.names(outData) = as.character(1:dim(data)[2])
knitr::kable(outData)
knitr::kable(outData,row.names=T)
naRate = 1:5/5
naRate
which(naRate>0.2 & naRate < 0.5)
htmltools::h4("These variables including 20% ~ 50% NAs:")
narate
naRate
NAs = sapply(data,function(x) sum(is.na(x)))
naRate = NAs / dim(data)[2]
NAs
naRate = NAs / dim(data)[2]
naRate
iris1 = tbl_df(iris)
library(dplyr)
iris1 = tbl_df(iris)
class(iris1)
class(iris1) =="data.frame"
clas
?class
class(as.data.frame(iris1))
tbl_df
assert_that(is.data.frame(iris1))
class(1:5)
is.vector(1:5)
slotNames(iris)
dimNames(iris)
dimnames(iris)
names(list(iris))
list(iris)
data.frame(iris)
ls()
ls.str(iris)
str(iris)
args(iris)
dput(iris)
??name
all.name(iris)
all.names(iris)
all.names(expression(sin(x+y)))
all.names(expression(iris)
)
all.names(expression(iris))
names(iris)
all.names
expression(iris)
as.character(expression(iris))
expression
expression(iris)
eval(expression(iris))
expression(1+1)
eval(expression(1+1))
a <- function(x,name = as.character(expression(x))) {
print(name)
}
a(iris)
a(x = iris)
a <- function(x,name = all.names(expression(x))) {
print(name)
}
a(x = iris)
assign(x)
assign(iris)
builtins(internal = FALSE)
get
get(iris)
make.names(iris)
as.symbol(x)
as.symbol(iris)
mode(iris)
ttypeof(iris)
typeof(iris)
ls()
expression(ls())
eval(expression(ls()))
formula("iris")
formula(iris)
vectorCheck = function(vector,
class = "numeric",
lengthVector,
name = "It"){
if(!is.vector(vector)){
stop(sprintf("%s is not a vector!",name))
}
if(missing(lengthVector)){
lengthVector = length(vector)
}else if(length(vector) != lengthVector){
warning("The length of %s is not correct!")
}
if(class(vector) != class){
stop(sprintf("%s is not a %s object!",name,class))
}
}
vectorCheck(1:10/10)
vectorCheck(iris)
vectorCheck(iris,"Range")
vectorCheck(iris,name = "Range")
vectorCheck(1:10/10,3,name = "Range")
vectorCheck(1:10/10,lengthVector = 3,name = "Range")
warning(printf("The length of %s is not correct!",lengthVector))
warning(sprintf("The length of %s is not correct!",lengthVector))
vectorCheck = function(vector,
class = "numeric",
lengthVector,
name = "It"){
if(!is.vector(vector)){
stop(sprintf("%s is not a vector!",name))
}
if(missing(lengthVector)){
lengthVector = length(vector)
}else if(length(vector) != lengthVector){
warning(sprintf("The length of %s is not correct!",lengthVector))
}
if(class(vector) != class){
stop(sprintf("%s is not a %s object!",name,class))
}
}
##
vectorCheck(iris,name = "Range")
vectorCheck(1:10/10,lengthVector = 3,name = "Range")
## Check the vector
vectorCheck = function(vector,
class = "numeric",
lengthVector,
name = "It"){
if(!is.vector(vector)){
stop(sprintf("%s is not a vector!",name))
}
if(missing(lengthVector)){
lengthVector = length(vector)
}else if(length(vector) != lengthVector){
warning(sprintf("The length of %s is not correct!",name))
}
if(class(vector) != class){
stop(sprintf("%s is not a %s object!",name,class))
}
}
##
vectorCheck(iris,name = "Range")
vectorCheck(1:10/10,lengthVector = 3,name = "Range")
dataFrameCheck(iris)
## Check the class of inputData
dataFrameCheck = function(inputData){
## Support Data frame, tbl(from dplyr) and data.table
if(any(class(inputData) == "data.frame")){
inputData = as.data.frame(inputData)
}else{
stop("inputData is not a data frame!")
}
if(dim(inputData) < 2){
warning("Ther is only one row in the data frame! ")
}
return(inputData)
}
## Test
dataFrameCheck(iris)
substitute(a)
substitute(iris)
ls()
substitute(NAs)
library(networkD3)
?forceNetwork
forceNetwork(Links = MisJson$links, Nodes = MisJson$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, bounded = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 1, zoom = TRUE)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
library(preReport)
?sample
library(preReport)
test
testData
naReport(testData)
class(1:3)
class(c(0.11,0.3))
library(preReport)
naReport(testData)
library(preReport)
naReport(testData)
testData
inputData=testData
range = c(0, 0.4)
if(missing(inputData)){
stop("You should input a data.frame.")
}
inputData = dataFrameCheck(inputData)
library(preReport)
inputData = dataFrameCheck(inputData)
library(preReport)
dataFrameCheck()
dataFrameCheck
library(preReport)
dataFrameCheck
